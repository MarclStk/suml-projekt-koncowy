
import os
from datetime import datetime
from fpdf import FPDF
from typing import List, Optional

from src.backend.domain.models import LaptopSpecification, PricePrediction, LaptopCategory, RecommendedLaptop


class PDFService:
    
    def __init__(self, output_dir: str = "outputs"):
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)
    
    def generate_report(
        self, 
        laptop_spec: LaptopSpecification,
        price_prediction: PricePrediction,
        category: LaptopCategory,
        recommendations: Optional[List[RecommendedLaptop]] = None
    ) -> str:
        pdf = FPDF()
        pdf.add_page()

        pdf.set_font("Arial", "B", 16)

        pdf.cell(0, 10, "LapiMate - Laptop Price Prediction Report", ln=True, align="C")
        pdf.ln(10)

        pdf.set_font("Arial", "", 10)
        pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)
        pdf.ln(5)

        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10, "Laptop Specifications", ln=True)
        pdf.ln(5)

        pdf.set_font("Arial", "", 12)
        specs = [
            f"Company: {laptop_spec.company}",
            f"Product: {laptop_spec.product}",
            f"Type: {laptop_spec.type_name}",
            f"Screen Size: {laptop_spec.screen_size} inches",
            f"Screen Resolution: {laptop_spec.screen_resolution}",
            f"CPU: {laptop_spec.cpu}",
            f"RAM: {laptop_spec.ram} GB",
            f"GPU: {laptop_spec.gpu}",
            f"Operating System: {laptop_spec.operating_system}",
            f"Weight: {laptop_spec.weight} kg"
        ]
        
        for spec in specs:
            pdf.cell(0, 8, spec, ln=True)
        
        pdf.ln(10)

        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10, "Price Prediction", ln=True)
        pdf.ln(5)
        
        pdf.set_font("Arial", "", 12)
        pdf.cell(0, 8, f"Predicted Price: {price_prediction.predicted_price:.2f} {price_prediction.currency}", ln=True)
        
        if price_prediction.confidence_interval:
            lower, upper = price_prediction.confidence_interval
            pdf.cell(0, 8, f"Confidence Interval: {lower:.2f} - {upper:.2f} {price_prediction.currency}", ln=True)
        
        pdf.ln(5)

        pdf.cell(0, 8, f"Category: {category.name}", ln=True)
        pdf.cell(0, 8, f"Description: {category.description}", ln=True)
        
        pdf.ln(10)

        if recommendations:
            pdf.set_font("Arial", "B", 14)
            pdf.cell(0, 10, "Similar Laptops", ln=True)
            pdf.ln(5)
            
            pdf.set_font("Arial", "", 12)
            for i, laptop in enumerate(recommendations[:3], 1):  # Show top 3 recommendations
                pdf.set_font("Arial", "B", 12)
                pdf.cell(0, 8, f"{i}. {laptop.company} {laptop.product}", ln=True)
                
                pdf.set_font("Arial", "", 12)
                pdf.cell(0, 8, f"   Price: {laptop.actual_price:.2f} {price_prediction.currency}", ln=True)
                pdf.cell(0, 8, f"   Similarity Score: {laptop.similarity_score:.2f}", ln=True)
                pdf.cell(0, 8, f"   CPU: {laptop.specifications.cpu}", ln=True)
                pdf.cell(0, 8, f"   RAM: {laptop.specifications.ram} GB", ln=True)
                pdf.ln(5)

        pdf.ln(10)
        pdf.set_font("Arial", "I", 10)
        pdf.cell(0, 10, "Generated by LapiMate - Laptop Price Prediction App", ln=True, align="C")

        filename = f"laptop_prediction_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        filepath = os.path.join(self.output_dir, filename)
        pdf.output(filepath)
        
        return filepath
